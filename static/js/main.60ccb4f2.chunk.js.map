{"version":3,"sources":["components/IconCard/index.js","components/StatusMessage/index.js","components/ScoreBoard/index.js","components/Navbar/index.js","components/Footer/index.js","components/Game/index.js","App.js","serviceWorker.js","index.js"],"names":["IconCard","props","className","alt","name","src","image","onClick","processClick","id","StatusMessage","statusMsg","ScoreBoard","currentScore","highScore","Navbar","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","Footer","target","class","Game","state","icons","shuffleIcons","temp","index","arra1","ctr","length","Math","floor","random","setState","iconId","newIconArray","clickedOnIcon","newStatusMsg","forEach","matchingElement","isClicked","resetIcons","console","log","map","iconElement","this","icon","key","occupation","location","React","Component","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.60ccb4f2.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction IconCard(props) {\n  return (\n    <div className=\"col-sm-3\">\n      <div className=\"card m-1 shadow\">\n        <div className=\"img-container\">\n          <img className=\"img-fluid mx-auto d-block\" alt={props.name} src={props.image} onClick={() => props.processClick(props.id)} />\n        </div>\n      </div>\n    </div>\n    \n    \n  );\n}\n\nexport default IconCard;\n","import React from \"react\";\nimport \"./style.css\";\n\n\nfunction StatusMessage(props) { \nreturn( \n        <span className=\"navbar-text\">\n          {props.statusMsg}\n        </span>\n); \n}\n\nexport default StatusMessage;","import React from \"react\";\n\nfunction ScoreBoard(props) { \nreturn( \n  <span className=\"navbar-text\">\n      Score: {props.currentScore} | High Score: {props.highScore}\n  </span>\n);\n}\nexport default ScoreBoard;","import React from \"react\";\nimport StatusMessage from \"../StatusMessage\";\nimport ScoreBoard    from \"../ScoreBoard\";\nimport \"./style.css\";\n\nfunction Navbar(props) { \nreturn( \n<nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n  \n  <a className=\"navbar-brand\" href=\"/\"><i className=\"fas fa-mouse\"></i>  <strong>Clicky-Game</strong></a>\n  <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n    <span className=\"navbar-toggler-icon\"></span>\n  </button>\n\n  <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n    <div className=\"row container-fluid mx-auto\">\n        <div className=\"col text-center\">\n          <StatusMessage statusMsg={ props.statusMsg }/>\n        </div>\n        <div className=\"col text-right\"> \n          <ScoreBoard currentScore={props.currentScore} highScore={props.highScore}/>\n        </div>\n        </div>\n    </div>\n\n</nav>\n); \n}\n\nexport default Navbar;","import React    from \"react\";\nimport \"./style.css\";\n\nfunction Footer(props) {\n\n    return (\n        <footer className=\"bd-footer text-muted\">\n        <div className=\"container mt-3\">\n            \n            <p>\n                Built with <a href=\"https://reactjs.org/\" target=\"_blank\"><i class=\"fab fa-react\"></i>   React JS</a>\n            </p>\n            <p>\n                Access the <a href=\"https://github.com/j0serobles/clicky-game\" target=\"_blank\">GitHub Repo</a>\n            </p>\n        </div>\n        </footer>\n    );\n}\n\nexport default Footer;","import React    from \"react\";\nimport IconCard from \"../IconCard\";\nimport Navbar   from \"../Navbar\";\nimport Footer   from \"../Footer\";\nimport icons    from \"../../icons.json\";\n\nclass Game extends React.Component { \n\n    state = { \n        \"currentScore\"  : 0,\n        \"highScore\"      : 0, \n        \"statusMsg\"     : \"Click an image to begin!\",\n        \"icons\"         : icons\n    }\n\n    shuffleIcons = () => {\n        \n         let arra1 = this.state.icons;\n         let ctr   = this.state.icons.length\n         let temp\n         let index;\n        \n        // While there are elements in the array\n        while (ctr > 0) {\n          // Pick a random index\n          index = Math.floor(Math.random() * ctr);\n          // Decrease ctr by 1\n          ctr--;\n          // And swap the last element with it\n          temp = arra1[ctr];\n          arra1[ctr] = arra1[index];\n          arra1[index] = temp;\n        }\n        this.setState( { icons : arra1 } )\n    }\n\n    processClick = (iconId) => {\n\n        let clickedOnIcon = null;  // stores the Icon object clicked on from the state's icon[].\n        let newIconArray  = [];    // Copies the current state's icon[] array to replace the clicked icon.\n        let newStatusMsg  = \"\";\n        let currentScore  =  this.state.currentScore;\n        let highScore     =  this.state.highScore;\n\n        //Extract the clicked on Icon object from the state icon[] array:\n        this.state.icons.forEach( (matchingElement, index) => {\n\n            if ( matchingElement.id === iconId ) { \n                clickedOnIcon = matchingElement;\n                //console.log (`clickedOnIcon= `+ JSON.stringify(clickedOnIcon));\n            }\n        });\n\n            //If the clicked-on icon has already been clicked on, notify incorrect guess:\n            //Otherwise, notify the correct status and set current status to \"clicked = true\"\n            if ( clickedOnIcon && clickedOnIcon.isClicked ) {\n                newStatusMsg = \" You Guessed Incorrectly! \";\n                currentScore = 0;\n                this.resetIcons(); \n            } else if (clickedOnIcon && !clickedOnIcon.isClicked)  {\n               \n                console.log( `${currentScore} , ${this.state.icons.length}` );\n                if ( currentScore + 1 === this.state.icons.length) {\n                    newStatusMsg = \" Game Won!\";\n                    highScore = currentScore + 1;\n                    currentScore = 0;\n                    this.resetIcons();\n                } else {\n                  newStatusMsg = \" You guessed correctly! \";\n                  currentScore++;\n                  clickedOnIcon.isClicked = true;\n                  if ( currentScore > highScore ) {\n                    highScore = currentScore; \n                  }\n                }\n\n            }\n\n        //Copy each element of the current state's icon[] array to the new one, \n        // but replace the clicked-on icon to the modified copy.\n        newIconArray = this.state.icons.map ( iconElement => \n            (iconElement.id === clickedOnIcon.id) ? clickedOnIcon : iconElement );\n        \n            this.setState ( { \n                \"icons\"        : newIconArray,\n                \"statusMsg\"    : newStatusMsg,\n                \"currentScore\" : currentScore,\n                \"highScore\"    : highScore\n             }) ;\n       \n        this.shuffleIcons();\n    }\n\n    resetIcons = () => {\n        let newIconArray = [ ...this.state.icons];\n        newIconArray.forEach( iconElement => {\n            iconElement.isClicked = false;\n        });\n        this.setState( { \n            \"icons\"        : newIconArray \n        });\n    }\n\n    render() { \n        return ( \n            <div className=\"container\">\n                <Navbar statusMsg={this.state.statusMsg} currentScore={this.state.currentScore} highScore={this.state.highScore}/>\n              <div className=\"row mt-3\">\n                { this.state.icons.map( icon => (\n                <IconCard\n                  processClick={ () => this.processClick(icon.id) }\n                  id={icon.id}\n                  key={icon.id}\n                  name={icon.name}\n                  image={icon.image}\n                  occupation={icon.occupation}\n                  location={icon.location}\n                />\n          \n            )) }\n            </div>\n            <Footer/>\n            </div>\n        )\n    }\n}\n\nexport default Game;","import React from \"react\";\nimport Game from \"./components/Game\";\n\nfunction App() {\n  return (\n    <Game/>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}